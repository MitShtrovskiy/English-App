from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.routers import words  # –†–æ—É—Ç–µ—Ä —Å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏ /words
from app.database import SessionLocal
from app import models

app = FastAPI()

# ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:5173",  # –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        "https://english-app-nine.vercel.app",  # —Ç–≤–æ–π Vercel –¥–æ–º–µ–Ω
        "https://english-app-git-main-mitshtrovskiy-projects.vercel.app"  # fallback –¥–æ–º–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö deploy preview
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
@app.middleware("http")
async def add_charset_header(request, call_next):
    response = await call_next(request)
    response.headers["Content-Type"] = "application/json; charset=utf-8"
    return response

# ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
app.include_router(words.router)


# === üì¶ –î–µ–º–æ-—Å–ª–æ–≤–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ ===
def seed_words():
    db = SessionLocal()

    if db.query(models.Word).first():
        db.close()
        return  # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–ª–æ–≤–∞ ‚Äî –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º

    sample_words = [
        {
            "word": "affectionate",
            "transcription": "[…ôÀàfek É…ôn…ôt]",
            "translation": "–ª–∞—Å–∫–æ–≤—ã–π",
            "example": "She is very affectionate with children.",
            "learned": False,
        },
        {
            "word": "ambitious",
            "transcription": "[√¶mÀàb…™ É…ôs]",
            "translation": "–∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π",
            "example": "He's an ambitious young man.",
            "learned": False,
        },
        {
            "word": "honest",
            "transcription": "[Àà…ín…™st]",
            "translation": "—á–µ—Å—Ç–Ω—ã–π",
            "example": "She's very honest about her feelings.",
            "learned": True,
        },
        {
            "word": "organized",
            "transcription": "[Àà…îÀê…°…ôna…™zd]",
            "translation": "–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π",
            "example": "She's very organized at work.",
            "learned": True,
        },
    ]

    for data in sample_words:
        db.add(models.Word(**data))

    db.commit()
    db.close()


# ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
@app.on_event("startup")
def on_startup():
    seed_words()