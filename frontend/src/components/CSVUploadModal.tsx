import { useRef, useState } from 'react'
import Papa from 'papaparse'
import { api } from '@/utils/api'
import { Button } from '@/components/ui/button'
import { X } from 'lucide-react'

interface CSVUploadModalProps {
  open: boolean
  onClose: () => void
}

export default function CSVUploadModal({ open, onClose }: CSVUploadModalProps) {
  const fileInputRef = useRef<HTMLInputElement | null>(null)
  const [status, setStatus] = useState<string | null>(null)
  const [isUploading, setIsUploading] = useState(false)

  if (!open) return null // üßº –ú–æ–¥–∞–ª–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ open=true

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    setIsUploading(true)
    setStatus('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV...')

    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: async (results) => {
        const rows = results.data as any[]
        const validWords = rows.filter(row => row.word && row.translation)

        setStatus(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º ${validWords.length} —Å–ª–æ–≤...`)

        try {
          for (const word of validWords) {
            await api.post('/words', {
              word: word.word,
              translation: word.translation,
              transcription: word.transcription || '',
              example: word.example || '',
              learned: String(word.learned).toLowerCase() === 'true',
            })
          }
          setStatus(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${validWords.length} —Å–ª–æ–≤`)
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err)
          setStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ')
        } finally {
          setIsUploading(false)
        }
      },
      error: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ CSV:', error)
        setStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞')
        setIsUploading(false)
      },
    })
  }

  const closeAndReset = () => {
    setStatus(null)
    setIsUploading(false)
    onClose()
  }

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm">
      <div className="bg-[#1A1A1A] w-full max-w-md rounded-[20px] p-6 relative shadow-lg text-white">
        {/* –ó–∞–∫—Ä—ã—Ç–∏–µ */}
        <button
          onClick={closeAndReset}
          className="absolute top-4 right-4 text-white/70 hover:text-white"
        >
          <X className="w-5 h-5" />
        </button>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <h2 className="text-xl font-medium mb-1">–ò–º–ø–æ—Ä—Ç CSV</h2>
        <p className="text-sm text-white/60 mb-5">
          –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∏–∑ CSV-—Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è UTF-8 —Å BOM.
        </p>

        {/* –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ */}
        <input
          type="file"
          accept=".csv"
          ref={fileInputRef}
          className="hidden"
          onChange={handleFileChange}
        />

        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ */}
        <Button
          onClick={() => fileInputRef.current?.click()}
          disabled={isUploading}
          className="w-full"
        >
          –í—ã–±—Ä–∞—Ç—å CSV-—Ñ–∞–π–ª
        </Button>

        {/* –°—Ç–∞—Ç—É—Å */}
        {status && (
          <p className="mt-4 text-sm text-white/80 whitespace-pre-wrap">
            {status}
          </p>
        )}
      </div>
    </div>
  )
}