import { useEffect, useState } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { api } from '../utils/api'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { Switch } from '@/components/ui/switch'

export default function EditWordPage() {
  const { id } = useParams<{ id: string }>()
  const isNew = id === 'new'
  const navigate = useNavigate()

  const [word, setWord] = useState({
    word: '',
    translation: '',
    transcription: '',
    example: '',
    learned: false,
  })

  const [error, setError] = useState<string | null>(null)

  // üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞ (–µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
  useEffect(() => {
    if (!id || isNew) return
    api.get(`/words/${id}`)
      .then((res) => setWord(res.data))
      .catch(() => setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–æ.'))
  }, [id])

  // üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setWord((prev) => ({ ...prev, [name]: value }))
  }

  // ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å "–í—ã—É—á–µ–Ω–æ"
  const toggleLearned = (value: boolean) => {
    setWord((prev) => ({ ...prev, learned: value }))
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const handleSubmit = async () => {
    const cleaned = {
      ...word,
      word: word.word.trim(),
      translation: (word.translation || '').trim(),
      transcription: (word.transcription || '').trim(),
      example: (word.example || '').trim(),
    }

    // ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!cleaned.word || !cleaned.translation || !cleaned.example) {
      setError('–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.')
      return
    }

    try {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞:', cleaned) // ‚úÖ –õ–æ–≥ –∑–∞–ø—Ä–æ—Å–∞
      if (isNew) {
        await api.post('/words', cleaned)
      } else {
        await api.put(`/words/${id}`, cleaned)
      }
      navigate('/words')
    } catch {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.')
    }
  }

  // üóë –£–¥–∞–ª–µ–Ω–∏–µ
  const handleDelete = async () => {
    try {
      await api.delete(`/words/${id}`)
      navigate('/words')
    } catch {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.')
    }
  }

  return (
    <div className="max-w-[430px] mx-auto px-4 py-6 space-y-6">
      {/* üîô –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="flex items-center justify-between">
        <Button variant="ghost" onClick={() => navigate(-1)}>‚Üê –ù–∞–∑–∞–¥</Button>
        <Button variant="destructive" onClick={handleDelete}>–£–¥–∞–ª–∏—Ç—å</Button>
      </div>

      {/* üìù –§–æ—Ä–º–∞ */}
      <div className="space-y-4">
        <Input name="word" placeholder="–°–ª–æ–≤–æ" value={word.word || ''} onChange={handleChange} />
        <Input name="translation" placeholder="–ü–µ—Ä–µ–≤–æ–¥" value={word.translation || ''} onChange={handleChange} />
        <Input name="transcription" placeholder="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è" value={word.transcription || ''} onChange={handleChange} />
        <Textarea name="example" placeholder="–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è" value={word.example || ''} onChange={handleChange} />

        <div className="flex items-center justify-between pt-2">
          <span className="text-sm text-white/80">–í—ã—É—á–µ–Ω–æ</span>
          <Switch checked={word.learned} onCheckedChange={toggleLearned} />
        </div>
      </div>

      {error && <p className="text-red-500 text-sm">{error}</p>}

      <Button onClick={handleSubmit} className="w-full mt-4">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
    </div>
  )
}