import { useEffect, useState } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { api } from '../utils/api'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Button } from '@/components/ui/button'
import { Switch } from '@/components/ui/switch'

export default function EditWordPage() {
  const { id } = useParams<{ id: string }>()
  const navigate = useNavigate()
  const isNew = !id || id === 'new'

  const [word, setWord] = useState({
    word: '',
    translation: '',
    transcription: '',
    example: '',
    learned: false,
  })

  const [error, setError] = useState<string | null>(null)

  // üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞ –ø–æ ID (–µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º)
  useEffect(() => {
    if (!id || isNew) return
    api
      .get(`/words/${id}`)
      .then((res) => setWord(res.data))
      .catch(() => setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–æ.'))
  }, [id])

  // üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setWord((prev) => ({ ...prev, [name]: value }))
  }

  // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è "–í—ã—É—á–µ–Ω–æ"
  const toggleLearned = (value: boolean) => {
    setWord((prev) => ({ ...prev, learned: value }))
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const handleSubmit = async () => {
    if (!word.word.trim() || !word.translation?.trim()) {
      setError('–°–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.')
      return
    }

    try {
      if (isNew) {
        await api.post('/words', word)
      } else {
        await api.put(`/words/${Number(id)}`, word)
      }
      navigate('/words')
    } catch (e: any) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.')
    }
  }

  // üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
  const handleDelete = async () => {
    try {
      await api.delete(`/words/${Number(id)}`)
      navigate('/words')
    } catch {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.')
    }
  }

  return (
    <div className="max-w-[430px] mx-auto px-4 py-6 space-y-6">
      {/* üîô –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="flex items-center justify-between">
        <Button variant="ghost" onClick={() => navigate(-1)}>
          ‚Üê –ù–∞–∑–∞–¥
        </Button>
        {!isNew && (
          <Button variant="destructive" onClick={handleDelete}>
            –£–¥–∞–ª–∏—Ç—å
          </Button>
        )}
      </div>

      {/* üìù –§–æ—Ä–º–∞ */}
      <div className="space-y-4">
        <Input
          name="word"
          placeholder="–°–ª–æ–≤–æ"
          value={word.word}
          onChange={handleChange}
        />
        <Input
          name="translation"
          placeholder="–ü–µ—Ä–µ–≤–æ–¥"
          value={word.translation}
          onChange={handleChange}
        />
        <Input
          name="transcription"
          placeholder="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"
          value={word.transcription}
          onChange={handleChange}
        />
        <Textarea
          name="example"
          placeholder="–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
          value={word.example}
          onChange={handleChange}
        />

        {/* ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å "–í—ã—É—á–µ–Ω–æ" */}
        <div className="flex items-center justify-between pt-2">
          <span className="text-sm text-white/80">–í—ã—É—á–µ–Ω–æ</span>
          <Switch checked={word.learned} onCheckedChange={toggleLearned} />
        </div>
      </div>

      {/* ‚ö†Ô∏è –û—à–∏–±–∫–∞ */}
      {error && <p className="text-red-500 text-sm">{error}</p>}

      <Button onClick={handleSubmit} className="w-full mt-4">
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
      </Button>
    </div>
  )
}